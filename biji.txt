day01:
	1.Linux操作系统的安装；
	2.常用的指令：
		一切皆文件的思想；
		1.文件/目录操作：
			cd:切换工作目录；
			linux系统的文件目录：
				/ -- 根目录；
				/bin  -- 系统指令目录
				/uer/bin  
				/sbin
				/etc  -- 配置文件目录（账号/密码）
				/home  -- 用户目录
					张三 -- /home/zhangsan
				/root  -- 超级用户目录；
			命令提示符：
				sram@sram-virtual-machine:/$
				用户名@机器名：当前工作目录 用户类型（$:普通 #：超级）
				
			ls -- 显示某个目录下的文件和目录
				-：普通文件；
				d：目录文件；
				l: link软链接文件；（硬链接文件）
				c：char字符设备文件
				b：block块设备文件；
				s：socket文件；（网络文件）
				p: fifo文件（管道）
			.:当前目录
			..: 上一层目录
			~：主目录
			
		修改文件权限指令：
			chmod：修改文件权限；
				chmod 547 abc
		man手册：查看命令

		touch  -- 创建一个空白文档的；（修改最后修改时间的）
		rm  删除文件目录指令
			-r： 递归（目录）
			-f 	 强制（提醒）
		locate ： 查找文件
		用户：
			有效用户/真实用户
			who am i： 查看真实用户的
			whoami：查看有效用户的
			修改有效用户：
				su - root
	
		3.编辑器操作
			编辑工具：vim
			指令：vim 文件
			模式： 命令/插入/末行模式
			命令模式下：
				复制： nyy
				黏贴： p
				剪切： ndd
				撤销： u
			末行模式：
				w 保存
				q 退出
				wq 保存退出；
				！ 强制；（q！）
			编译工具：gcc/g++
		数据链路层---> 网络层（IP）--> 传输层（TCP/UDP）--> 应用层（HTTP）
	
		创建socket文件：
			int socket(int domain, int type, int protocol);
			函数说明：
				创建一个socket文件；
			参数说明：
				domain： （地址族）协议族；
					AF_UNIX/AF_LOCAL:网络本地通信；
					AF_INET:ipv4通信
					AF_INET6:ipv6通信；
	
				type：通信类型
					SOCK_STREAM:流式（Tcp）
					SOCK_DGRAM:数据报（UDP）
				protocol:设置为0；	
					
			函数返回：
				成功：返回一个文件描述符；
				失败：-1，set the error
		服务器绑定IP地址和端口号的函数
			回环地址：127.0.0.1
			通用地址：0.0.0.0
			int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
		函数说明：
			绑定IP地址和端口号
		函数参数：
			sockfd ： 表示欲绑定ip地址的socket文件描述符；
			addr：表示ip地址的结构体；
				struct sockaddr ：系统通用一个ip地址结构体；（不用）
				需要到存放头文件中查找（netinet/in.h）
				需要将ip地址等设置为网络字节序；
					htons/ntohs/htonl/ntohl:主机字节序转化的；
					inet_ntop/inet_pton/inet_addr:操作ip地址的；
			len：表示ip结构体长度；
		函数返回：	
			成功 0；
			失败： -1，set the errno;
					
		监听函数：
			int listen（int sockfd,int backlog）;
		函数说明：	
			把服务器处于监听状态；
		函数参数：
				sockfd：socket文件描述符；
				backlog： 设置处于等待连接客户端的个数；
		函数返回：
			略；
			
		int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
		函数作用：
			服务器连接客户端函数，阻塞函数；（fcntl）
		函数参数：	
			sockfd：服务器的监听socket文件描述符；
			addr： 结果参数，获取客户端IP地址和端口号；
			addrlen： 结果参数，获取客户端ip地址长度的；
		函数返回：
			*成功： 通信使用的文件描述符；（客户端）
			失败： -1，set the errno；
			
		int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);	
		函数作用：
			客户端连接服务器使用的函数；
		函数参数：	
			sockfd ： 客户端通信使用的socket文件描述符；
			addr ： 服务器IP地址；
			addrlen： 服务器IP地址的长度；
		函数返回：
			成功： 0；
			失败： -1，set the errno
			
		setsockopt函数；
		selete函数；？
		
		int open(const char *pathname, int flags, mode_t mode);
		函数作用：	
			打开或者创建一个文件的；（create）
		函数参数：
			pathanme ： 表示打开或者创建文件的路径（绝对/相对路径）
			flags：
				O_RDONLY:只读；
				O_WRONLY:只写
				O_RDWR:读写
				-----------------------------------必须包含以上内容
				O_CREAT: 创建文件；
				O_TRUNC: 截断文件；
				O_APPEND: 追加文件；
			mode：8进制权限数据；
				0644
		返回值：
			成功： 文件描述符；
			失败： -1，set the errno
		ssize_t read(int fd, void *buf, size_t count);
		函数说明：
			从打开文件中读取内容；
		函数参数：	
			fd ： 打开文件的文件描述符；
			buf ： 读取内容空间；
			count： 期望读取的字节数；
		函数返回：
			成功：实际读取的字节数；
			失败： -1，set the errno
		write
		ssize_t write(int fd, const void *buf, size_t count);
		函数说明：
			向打开文件写入数据；
		函数参数：
			fd ： 打开文件的文件描述符；
			buf ： 写入文件的内容；
			count： 期望写入的字节数；
		函数返回：
			成功：实际写入的字节数；
			失败： -1，set the errno
		close
		int close(int fd);:表示关闭文件的；
		lseek：修改文件的位置；
		off_t lseek(int fd, off_t offset, int whence);
		函数参数：
			fd ： 修改的文件；
			offset： 表示偏移量；
			whence：从那个位置开始偏移：
				SEEK_SET:文件开头
				SEEK_CUR:当前位置；
				SEEK_END:文件结尾；
		
		fork
		wait
		exit
		_exit
		kill
			
			
			
	
	
	
	
	
	
	

	
	